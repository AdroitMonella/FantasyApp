// <auto-generated />
using System;
using FantasyApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FantasyApp.Migrations
{
    [DbContext(typeof(FantasyAppContext))]
    [Migration("20230814092420_added_url")]
    partial class added_url
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FantasyApp.Models.Author", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VolumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorId");

                    b.HasIndex("VolumeId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("FantasyApp.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VolumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VolumeId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("FantasyApp.Models.MainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MainCategory");
                });

            modelBuilder.Entity("FantasyApp.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("FantasyApp.Models.Volume", b =>
                {
                    b.Property<Guid>("VolumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ISBN_10")
                        .HasColumnType("int");

                    b.Property<int>("ISBN_13")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PrintType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Published_date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("SmallThumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VolumeId");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Volume");
                });

            modelBuilder.Entity("FantasyApp.Models.Author", b =>
                {
                    b.HasOne("FantasyApp.Models.Volume", "Volume")
                        .WithMany("Authors")
                        .HasForeignKey("VolumeId");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("FantasyApp.Models.Category", b =>
                {
                    b.HasOne("FantasyApp.Models.Volume", "Volume")
                        .WithMany("Categories")
                        .HasForeignKey("VolumeId");

                    b.Navigation("Volume");
                });

            modelBuilder.Entity("FantasyApp.Models.Volume", b =>
                {
                    b.HasOne("FantasyApp.Models.MainCategory", "MainCategory")
                        .WithMany()
                        .HasForeignKey("MainCategoryId");

                    b.HasOne("FantasyApp.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId");

                    b.Navigation("MainCategory");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("FantasyApp.Models.Volume", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
